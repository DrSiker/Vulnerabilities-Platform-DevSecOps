name: DevSecOps CI/CD

on:
  push:
    paths:
      - 'app-vulnerable/**'
  # pull_request:
  #   paths:
  #     - 'app-vulnerable/**'

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install -r app-vulnerable/requirements.txt

      - name: Run Secret Scanning (GitLeaks)
        uses: gitleaks/gitleaks-action@v1.2.0
        with:
          args: --report-format=json --report-path=gitleaks_report.json
        continue-on-error: true

      # 🔍 **Escaneo SAST (Código Estático)**
      - name: Run SAST (Bandit)
        run: |
          pip install bandit
          bandit -r app-vulnerable/src/ | tee bandit_report.txt

      # - name: Run SAST (SonarQube)
      #   env:
      #     SONAR_HOST_URL: "https://your-sonarqube-instance"
      #     SONAR_TOKEN: "your-token"
      #   run: |
      #     sonar-scanner -Dsonar.projectKey=app-vulnerable -Dsonar.sources=app-vulnerable/src/ -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN

      # 🔍 **Escaneo de Dependencias (SCA)**
      # - name: Run SCA (JFrog Xray)
      #   env:
      #     JFROG_URL: "https://your-jfrog-instance"
      #     JFROG_USER: "your-username"
      #     JFROG_PASSWORD: "your-password"
      #   run: |
      #     curl -u $JFROG_USER:$JFROG_PASSWORD -X POST "$JFROG_URL/xray/api/v1/scanArtifact" \
      #     -H "Content-Type: application/json" --data '{"artifact": "app-vulnerable/requirements.txt"}' | tee jfrog_report.txt
      
      - name: Run SCA (Trivy)
        run: |
          docker run --rm -v ${{ github.workspace }}:/app aquasec/trivy fs --scanners vuln /app/app-vulnerable/ > trivy_report.txt

      # 🔍 **Escaneo Dinámico (DAST)**
      # - name: Run DAST (OWASP ZAP)
      #   uses: zaproxy/action-full-scan@v0.5.0
      #   with:
      #     target: 'http://localhost:8080'
      #   continue-on-error: true

      - name: Build Docker Image
        run: |
          docker build -t app-vulnerable:latest app-vulnerable/

      - name: Run SCA (Trivy) on Docker Image
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image app-vulnerable:latest > trivy_docker_report.txt

      # - name: Start Backend Service
      #   run: |
      #     docker-compose up -d backend
      #     sleep 15

      # 📊 **Procesamiento de Reportes**
      - name: Parse Reports and Send to Backend
        run: |
          echo "{" > vulnerabilities.json
          echo "  \"SAST\": " >> vulnerabilities.json
          cat bandit_report.txt | jq -R -s '.' >> vulnerabilities.json
          echo "," >> vulnerabilities.json
          echo "  \"SCA\": " >> vulnerabilities.json
          cat trivy_report.txt | jq -R -s '.' >> vulnerabilities.json
          echo "," >> vulnerabilities.json
          echo "  \"Trivy Docker\": " >> vulnerabilities.json
          cat trivy_docker_report.txt | jq -R -s '.' >> vulnerabilities.json
          echo "," >> vulnerabilities.json
          echo "  \"Secrets\": " >> vulnerabilities.json
          cat gitleaks_report.json | jq -R -s '.' >> vulnerabilities.json
          echo "}" >> vulnerabilities.json

          echo "Sending vulnerabilities to backend..."
          curl -X POST "http://localhost:5000/vulnerabilities" \
          -H "Content-Type: application/json" \
          -d @vulnerabilities.json
