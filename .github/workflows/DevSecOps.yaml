# name: DevSecOps Pipeline

# on:
#   push:
#     paths:
#       - 'app-vulnerable/**'

# jobs:
#   security-scans:
#     runs-on: ubuntu-latest
#     services:
#       db:
#         image: drsiker/vulnerabilities-platform-devsecops-db:latest
#         ports:
#           - "5432:5432"
#         env:
#           POSTGRES_USER: ${{ secrets.DB_USER }}
#           POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           POSTGRES_DB: ${{ secrets.DB_NAME }}

#       backend:
#         image: drsiker/vulnerabilities-platform-devsecops-backend:latest
#         ports:
#           - "5000:5000"
#         env:
#           DB_HOST: db
#           DB_PORT: 5432
#           DB_USER: ${{ secrets.DB_USER }}
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           DB_NAME: ${{ secrets.DB_NAME }}

#       frontend:
#         image: drsiker/vulnerabilities-platform-devsecops-frontend:latest
#         ports:
#           - "3000:3000"

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           pip install bandit
#           sudo apt-get install -y wget unzip jq

#       - name: Wait for backend to be ready
#         run: |
#           echo "Waiting for backend to be ready..."
#           until curl -s http://localhost:5000; do
#             sleep 1
#           done

#       - name: Run Bandit (SAST)
#         run: |
#           bandit -r app-vulnerable/src/ | tee bandit_report.txt || true
#           echo "Bandit report generated."

#       - name: Convert Bandit Report to JSON
#         run: |
#           echo '{"tool": "Bandit", "report": ' > bandit_report.json
#           cat bandit_report.txt | jq -R -s '.' >> bandit_report.json
#           echo '}' >> bandit_report.json
#           echo "Bandit report converted to JSON."

#       - name: Send Bandit Report to Backend
#         run: |
#           echo "Sending Bandit report to backend..."
#           curl -X POST "http://localhost:5000/vulnerabilities" \
#           -H "Content-Type: application/json" \
#           -d @bandit_report.json

#       - name: Run Dependency-Check (SCA)
#         run: |
#           wget --tries=3 https://github.com/jeremylong/DependencyCheck/releases/download/v8.2.1/dependency-check-8.2.1-release.zip
#           unzip dependency-check-8.2.1-release.zip
#           ./dependency-check/bin/dependency-check.sh --project "Vulnerabilities-Platform" --scan . --format JSON --out dependency-check-report.json || true
#           echo "Dependency-Check report generated."

#       - name: Send Dependency-Check Report to Backend
#         run: |
#           echo "Sending Dependency-Check report to backend..."
#           curl -X POST "http://localhost:5000/vulnerabilities" \
#           -H "Content-Type: application/json" \
#           -d '{"tool": "Dependency-Check", "report": '$(cat dependency-check-report.json)'}'

#       - name: Run OWASP ZAP (DAST)
#         run: |
#           docker pull owasp/zap2docker-stable
#           docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
#           -t http://your-app-url.com -r zap_report.html -J zap_report.json || true
#           echo "OWASP ZAP report generated."

#       - name: Send OWASP ZAP Report to Backend
#         run: |
#           echo "Sending OWASP ZAP report to backend..."
#           curl -X POST "http://localhost:5000/vulnerabilities" \
#           -H "Content-Type: application/json" \
#           -d '{"tool": "OWASP ZAP", "report": '$(cat zap_report.json)'}'