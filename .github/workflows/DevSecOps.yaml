name: DevSecOps Pipeline CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'app-vulnerable/**'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip jq
      timeout-minutes: 5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install security tools
      run: |
        # Install Bandit
        pip install bandit safety
        
        # Install Snyk
        npm install -g snyk
        
        # Install Trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.18.3
        
        # Install OWASP Dependency-Check
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
        unzip dependency-check-8.4.0-release.zip
      timeout-minutes: 10

    # Ejecutar Gitleaks para detecciÃ³n de secretos
    - name: Run Gitleaks (Secret Scanning)
      uses: gitleaks/gitleaks-action@v2
      continue-on-error: true

    # Ejecutar Bandit
    - name: Run Bandit (SAST Analysis)
      run: |
        bandit -r app-vulnerable/src/ -f json -o bandit_report.json || true
        echo "ðŸ“Œ Bandit Report:"
        cat bandit_report.json || echo "{}" > bandit_report.json

    - name: Install Python Dependencies
      run: |
        pip install -r app-vulnerable/requirements.txt
      

    # Ejecutar Snyk
    - name: Run Snyk Security Scan (SCA)
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        snyk test --json --detection-depth=5 --file=app-vulnerable/requirements.txt > snyk_report.json || true
        echo "ðŸ“Œ Snyk Report:"
        cat snyk_report.json || echo "{}" > snyk_report.json

    # Ejecutar Trivy
    - name: Run Trivy File System Scan (container scanning)
      run: |
        trivy fs --format json --output trivy_fs_report.json . || true
        echo "ðŸ“Œ Trivy Report:"
        cat trivy_fs_report.json || echo "{}" > trivy_fs_report.json

    # Ejecutar OWASP Dependency Check
    - name: Run OWASP Dependency Check
      run: |
        ./dependency-check/bin/dependency-check.sh --scan app-vulnerable/ --format JSON --out dependency-check-report.json || true
        echo "ðŸ“Œ Dependency Check Report:"
        cat dependency-check-report.json || echo "{}" > dependency-check-report.json
  
    #  Ejecutar Safety
    # - name: Run Python Dependencies Check (Safety)
    #   run: |
    #     safety scan -r app-vulnerable/requirements.txt --json > safety_report.json || true
    #     echo "ðŸ“Œ Safety Report:"
    #     cat safety_report.json || echo "{}" > safety_report.json

    # Subir reportes de seguridad como artefacto
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          gitleaks_report.json
          bandit_report.json
          snyk_report.json
          trivy_fs_report.json
          dependency-check-report.json
       # safety_report.json

    # Enviar reportes JSON al backend
    - name: Send Security Reports to Backend
      run: |
        sleep 5

        echo "ðŸ“Œ Enviando reportes al backend..."

        curl -X POST "http://localhost:5000/upload-report?type=bandit" \
        -H "Content-Type: application/json" \
        -d @bandit_report.json || echo "Error enviando Bandit Report"

        curl -X POST "http://localhost:5000/upload-report?type=snyk" \
        -H "Content-Type: application/json" \
        -d @snyk_report.json || echo "Error enviando Snyk Report"

        curl -X POST "http://localhost:5000/upload-report?type=trivy" \
        -H "Content-Type: application/json" \
        -d @trivy_fs_report.json || echo "Error enviando Trivy Report"

      # curl -X POST "http://localhost:5000/upload-report?type=dependency-check" \
      # -H "Content-Type: application/json" \
      # -d @dependency-check-report.json || echo "Error enviando Dependency-Check Report"

      # curl -X POST "http://localhost:5000/upload-report?type=gitleaks" \
      # -H "Content-Type: application/json" \
      # -d @gitleaks_report.json || echo "Error enviando Gitleaks Report"

  
    # Limpiar archivos temporales despuÃ©s del escaneo
    - name: Cleanup
      if: always()
      run: |
        rm -rf dependency-check/
        rm -f *.zip
        rm -f *.json

